{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/Users/raphael/github/benevolent-crud/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/raphael/github/benevolent-crud/src/contexts/BenevolentContext.tsx\",\n    _s = $RefreshSig$();\n\n//allow the communication among components\nimport { createContext, useState } from 'react';\nimport { IntroModal } from '../components/IntroModal';\nexport var BenevolentContext = /*#__PURE__*/createContext({}); //children comes from _app.tsx\n//it´s created a typescript (interface) to define the type of the children \n\nexport function BenevolentProvider(_ref) {\n  _s();\n\n  var children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  var _useState = useState(true),\n      isIntroModalOpen = _useState[0],\n      setIsIntroModalOpen = _useState[1];\n\n  function closeIntroModal() {\n    setIsIntroModalOpen(false);\n  }\n\n  function openIntroModal() {\n    setIsIntroModalOpen(true);\n  }\n\n  return (\n    /*#__PURE__*/\n    //starts the context to allow the communication among components\n    _jsxDEV(BenevolentContext.Provider, {\n      value: {\n        closeIntroModal: closeIntroModal,\n        openIntroModal: openIntroModal\n      },\n      children: [children, /*#__PURE__*/_jsxDEV(IntroModal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(BenevolentProvider, \"F7SQt+vKb5kRZWSZ60Dlll2poFU=\");\n\n_c = BenevolentProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"BenevolentProvider\");","map":{"version":3,"sources":["/Users/raphael/github/benevolent-crud/src/contexts/BenevolentContext.tsx"],"names":["createContext","useState","IntroModal","BenevolentContext","BenevolentProvider","children","rest","isIntroModalOpen","setIsIntroModalOpen","closeIntroModal","openIntroModal"],"mappings":";;;;;;AAAA;AACA,SAASA,aAAT,EAAwBC,QAAxB,QAA8D,OAA9D;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAYA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC,C,CAEP;AACA;;AACA,OAAO,SAASI,kBAAT,OAGqB;AAAA;;AAAA,MAFxBC,QAEwB,QAFxBA,QAEwB;AAAA,MADrBC,IACqB;;AAAA,kBACwBL,QAAQ,CAAC,IAAD,CADhC;AAAA,MACjBM,gBADiB;AAAA,MACCC,mBADD;;AAGxB,WAASC,eAAT,GAA2B;AACvBD,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH;;AAED,WAASE,cAAT,GAA0B;AACtBF,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH;;AAED;AAAA;AACI;AACA,YAAC,iBAAD,CAAmB,QAAnB;AACI,MAAA,KAAK,EAAE;AACHC,QAAAA,eAAe,EAAfA,eADG;AAEHC,QAAAA,cAAc,EAAdA;AAFG,OADX;AAAA,iBAMKL,QANL,eAQM,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAaH;;GA3BeD,kB;;KAAAA,kB","sourcesContent":["//allow the communication among components\nimport { createContext, useState, ReactNode, useEffect } from 'react';\nimport { IntroModal } from '../components/IntroModal';\n\n\ninterface BenevolentDataContext {\n    closeIntroModal: () => void;\n    openIntroModal: () => void;\n}\n\ninterface BenevolentProviderProps {\n    children: ReactNode;\n}\n\nexport const BenevolentContext = createContext({} as BenevolentDataContext);\n\n//children comes from _app.tsx\n//it´s created a typescript (interface) to define the type of the children \nexport function BenevolentProvider({\n    children,\n    ...rest // ...rest contains the level, currentExperience, challengesCompleted, experienceToNextLevel\n}: BenevolentProviderProps) {\n    const [isIntroModalOpen, setIsIntroModalOpen] = useState(true);\n\n    function closeIntroModal() {\n        setIsIntroModalOpen(false);\n    }\n    \n    function openIntroModal() {\n        setIsIntroModalOpen(true);\n    }\n\n    return (\n        //starts the context to allow the communication among components\n        <BenevolentContext.Provider\n            value={{\n                closeIntroModal,\n                openIntroModal,\n            }}\n        >\n            {children}\n\n            { <IntroModal />}\n        </BenevolentContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}