{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/raphael/github/benevolent-crud/src/pages/p/[id].tsx\";\nimport React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport Layout from \"../../components/Layout\";\nimport Router from \"next/router\";\nimport prisma from '../../../lib/prisma';\nimport { useSession } from \"next-auth/client\";\nimport styles from '../../styles/Draft.module.css';\nexport const getServerSideProps = async ({\n  params\n}) => {\n  const post = await prisma.post.findUnique({\n    where: {\n      id: Number(params === null || params === void 0 ? void 0 : params.id) || -1\n    },\n    include: {\n      author: {\n        select: {\n          name: true,\n          email: true\n        }\n      }\n    }\n  });\n  return {\n    props: post\n  };\n};\n\nasync function publishPost(id) {\n  await fetch(`http://localhost:3000/api/publish/${id}`, {\n    method: \"PUT\"\n  });\n  await Router.push(\"/\");\n}\n\nasync function deletePost(id) {\n  await fetch(`http://localhost:3000/api/post/${id}`, {\n    method: \"DELETE\"\n  });\n  await Router.push(\"/\");\n} //const Post: React.FC<PostProps> = (props) => {\n\n\nfunction Post(props) {\n  var _session$user, _props$author, _props$author2;\n\n  const [session, loading] = useSession();\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Autenticando ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n\n  const userHasValidSession = Boolean(session);\n  const postBelongsToUser = (session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.email) === ((_props$author = props.author) === null || _props$author === void 0 ? void 0 : _props$author.email);\n  let title = props.title;\n\n  if (!props.published) {\n    title = `${title} (Rascunho)`;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Escrito por \", (props === null || props === void 0 ? void 0 : (_props$author2 = props.author) === null || _props$author2 === void 0 ? void 0 : _props$author2.name) || \"Unknown author\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        source: props.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), !props.published && userHasValidSession && postBelongsToUser && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.submit,\n        onClick: () => publishPost(props.id),\n        children: \"Publicar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), userHasValidSession && postBelongsToUser && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.submit,\n        onClick: () => deletePost(props.id),\n        children: \"Apagar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n;\nexport default Post;","map":{"version":3,"sources":["/Users/raphael/github/benevolent-crud/src/pages/p/[id].tsx"],"names":["React","ReactMarkdown","Layout","Router","prisma","useSession","styles","getServerSideProps","params","post","findUnique","where","id","Number","include","author","select","name","email","props","publishPost","fetch","method","push","deletePost","Post","session","loading","userHasValidSession","Boolean","postBelongsToUser","user","title","published","content","submit"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { GetServerSideProps } from \"next\";\nimport ReactMarkdown from \"react-markdown\";\nimport Layout from \"../../components/Layout\";\nimport Router from \"next/router\";\nimport { PostProps } from \"../../components/Post\";\nimport prisma from '../../../lib/prisma';\nimport { useSession } from \"next-auth/client\";\nimport styles from '../../styles/Draft.module.css';\n\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\n  const post = await prisma.post.findUnique({\n    where: {\n      id: Number(params?.id) || -1,\n    },\n    include: {\n      author: {\n        select: { name: true, email: true },\n      },\n    },\n  });\n  return {\n    props: post,\n  };\n};\n\nasync function publishPost(id: number): Promise<void> {\n  await fetch(`http://localhost:3000/api/publish/${id}`, {\n    method: \"PUT\",\n  });\n  await Router.push(\"/\")\n}\n\nasync function deletePost(id: number): Promise<void> {\n  await fetch(`http://localhost:3000/api/post/${id}`, {\n    method: \"DELETE\",\n  });\n  await Router.push(\"/\")\n}\n\n//const Post: React.FC<PostProps> = (props) => {\nfunction Post(props: PostProps) {\n  const [session, loading] = useSession();\n  if (loading) {\n    return <div>Autenticando ...</div>;\n  }\n  const userHasValidSession = Boolean(session);\n  const postBelongsToUser = session?.user?.email === props.author?.email;\n  let title = props.title;\n  if (!props.published) {\n    title = `${title} (Rascunho)`;\n  }\n\n  return (\n    <Layout>\n      <div>\n        <h2>{title}</h2>\n        <p>Escrito por {props?.author?.name || \"Unknown author\"}</p>\n        <ReactMarkdown source={props.content} />\n        {!props.published && userHasValidSession && postBelongsToUser && (\n          <button \n            className={styles.submit}  \n            onClick={() => publishPost(props.id)}            \n          >\n            Publicar\n          </button>\n        )}\n        {userHasValidSession && postBelongsToUser && (\n          <button \n            className={styles.submit}  \n            onClick={() => deletePost(props.id)}\n          >\n            Apagar\n          </button>\n        )}\n      </div>\n    </Layout>\n  );\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}